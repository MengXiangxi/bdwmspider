function [Y,Xf,Af] = uscore_predict_nn(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Jan-2018 11:22:36.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;0;0;0;0;0];
x1_step1.gain = [3.86697602474865e-05;9.71892858531276e-06;0.002002002002002;0.0099009900990099;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.2776398836171907;-3.3735252338093593;-1.0570912495374365;-1.1895668936167421;-0.96762571774583717;-1.0626257190514525;2.0107683835409071;2.9830398490186174;-1.1220817802870771;-0.36111477139261039;-0.18174672446846493;-1.5023918752771965;-0.45735445462426566;-0.90934801837756618;-0.60227236144193552;2.0525194554966406;-1.648120773576554;1.6656102019514398;-1.9862111613856337;-2.5327023051743511];
IW1_1 = [-0.82693572245206992 0.98604739451780354 0.90191389322223059 -1.0500134616963575 -0.74859752165705817 -1.0856531747078619;0.58182388122245232 -3.2494041323279768 -0.078443685126451473 0.048006361994736541 0.11252558983440331 -0.14255332724420325;0.75599728351585593 -1.7772412894861052 0.99993389222260942 -1.6834987907126782 -1.5044604671798503 -0.61987538421921007;0.86403423247742928 -0.084298153316342411 -0.38842953928776092 -1.5759311462651564 0.23960398292854104 2.3630884263004255;-0.19084872139820694 -1.1084147154692248 -0.55025845845955967 -1.2250373959188559 2.2890517162697948 1.3830700962248379;-0.094449490029511349 -2.7054247865857937 0.095004456078461738 0.42863115177744643 -0.10105905178545163 1.265961272193316;1.9485019846285059 1.4720803861887073 0.16952502507148959 1.5423983810668955 -2.3178789768867092 -1.0808906030161953;2.8377856459491531 3.8897030370847219 0.067357420675978066 -0.67489620858145072 0.30518934843087564 -3.8725015539927368;1.8582132698900991 1.93090448589359 0.0044320980392083351 -0.3891067997448564 0.79076995840902586 0.50971479774890249;-0.80085316843534926 0.89589348220415799 1.7926649808029638 -0.12472536775149465 -0.8411729127114389 1.8665267144000841;-1.1117225620917506 -0.58762400026228478 1.838608401605863 -0.36071014684402597 -0.74090365461436414 1.1651615793141912;-1.999625162059965 1.3520955563387784 -1.6813012002484056 1.6478062522875407 -0.29083464899203754 -0.11538077226919755;-1.4233516134396151 -1.1346938508415207 0.58015091732173052 -0.73809798842078811 -1.8009531903570533 0.38666032066591721;0.72193785905796304 0.90360240236279621 -1.6906289377777659 0.94711681327741692 1.961145042412058 -1.1766280257893753;0.81086873851693708 -0.47134340288175802 3.4185791612065759 -0.44520834594071129 -0.81705301325912116 -0.94182625884152738;4.2493486866075161 2.384020568834023 0.46202796121932921 0.2822593542285376 -2.8411598766936019 -1.8236312401198709;-0.29288338766327959 -0.0073084533349298177 3.4029349510035622 -0.32963189108869778 -1.414958579764128 -1.4878667235567393;-0.50419897731058161 -1.5986069582459645 0.087121158568528645 -0.68858118728385243 -1.3763555808328314 1.2078530529053788;-0.55524757279066217 0.88682256075464827 -5.9482992526684875 -1.4404791640226606 0.44958793026604271 -0.15777736155088945;-0.70173661589327019 -2.4298917928237387 -2.4753520098013135 -0.85506971467740456 -0.90533392161936421 -0.23766679120823583];

% Layer 2
b2 = -0.43265706543791549;
LW2_1 = [-0.72078248181515725 -2.0317795458348811 -0.15999215369979503 2.3117780244177362 0.98395012856296926 1.1226029881941046 2.4421763063296344 3.8333933102798317 0.90943700239167458 0.89866234078685892 -1.2400790108237172 -0.83175501927137363 0.019573328996288764 -0.82906733569016833 -1.2554153809989328 -2.0494064573588351 1.510310306752173 -0.42985468984432806 -0.493870600915781 0.21411194739275705];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
